####### Global Parameters #########

# -3 - Alert level
# -2 - Critical level
# -1 - Error level
#  1 - Warning level
#  2 - Notice level
#  3 - Info level
#  4 - Debug level
log_level=${LOG_LEVEL}

log_stderror=no
log_facility=LOG_LOCAL0
children=${NUM_CHILDREN}

/* uncomment the following lines to enable debugging */
debug_mode=${DEBUG_MODE}

/* uncomment the next line to enable the auto temporary blacklisting of
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns
   lookup failures (default disabled) */
dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on reverse DNS on IPs */
auto_aliases=no


listen=udp:${INTERNAL_IP}:9060
listen=tcp:${INTERNAL_IP}:9060


####### Modules Section ########

#set module path
mpath="/usr/local/lib64/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Options Module
loadmodule "options.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 3)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

#### MYSQL module
# loadmodule "db_mysql.so"
loadmodule "db_text.so"

loadmodule "dispatcher.so"
modparam("dispatcher", "db_url", "text:///usr/src/opensips-2.4.7/dbtext")

#### AVPOPS module
loadmodule "avpops.so"

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure the enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)


#### DIALOG module
loadmodule "dialog.so"
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "default_timeout", 1800)  # 30 minutes
modparam("dialog", "db_mode", 2)
modparam("dialog", "db_url", "text:///usr/src/opensips-2.4.7/dbtext")


#### LOAD BALANCER module
loadmodule "load_balancer.so"
modparam("load_balancer", "db_url", "text:///usr/src/opensips-2.4.7/dbtext")
modparam("load_balancer", "probing_method", "OPTIONS")

modparam("load_balancer", "probing_interval", 10)

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "working_mode_preset", "single-instance-no-db")


#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")


loadmodule "proto_udp.so"
loadmodule "proto_tcp.so"


####### Routing Logic ########

# main request routing logic
route{
    if (is_method("OPTIONS")) {
        options_reply();
    }

    if (!mf_process_maxfwd_header("10")) {
            sl_send_reply("483","Too Many Hops");
            exit;
    }
    if (has_totag()) {
		# handle hop-by-hop ACK (no routing required)
		if ( is_method("ACK") && t_check_trans() ) {
			t_relay();
			exit;
		}

		# sequential request withing a dialog should
		# take the path determined by record-routing
		if ( !loose_route() ) {
			# we do record-routing for all our traffic, so we should not
			# receive any sequential requests without Route hdr.
			send_reply("404","Not here");
			exit;
		}
		
		# validate the sequential request against dialog
		if ( $DLG_status!=NULL && !validate_dialog() ) {
			xlog("In-Dialog $rm from $si (callid=$ci) is not valid according to dialog\n");
			## exit;
		}
		
		if (is_method("BYE")) {
			# do accounting even if the transaction fails
			do_accounting("log","failed");
		}

		# route it out to whatever destination was set by loose_route()
		# in $du (destination URI).
		route(RELAY);
		exit;
	}

    #### INITIAL REQUESTS

    # handle cancel and re-transmissions
    if ( is_method("CANCEL") ) {
            if ( t_check_trans() )
                    t_relay();
            exit;
    }

    t_check_trans();

	# preloaded route checking
	if (loose_route()) {
		xlog("L_ERR",
			"Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			send_reply("403","Preload Route denied");
		exit;
	}

	# record routing
	record_route();

	do_accounting("log");

    if (is_method("INVITE")) {
        if (!lb_start_or_next("1","pstn","1")) {
        xlog("L_ERR","Load Balance failed");
                send_reply("503","Service Unavailable");
                exit;
        }
    }

    else if (is_method("REGISTER")) {
            if (!ds_select_dst("1", "0")) {
                    send_reply("503","Service Unavailable");
                    exit;
            }
    }

    t_on_failure("GW_FAILOVER");

    # route the request
    if (!t_relay()) {
        sl_reply_error();
    }
    exit;
}

route[RELAY] {
    if (!t_relay()) {
        sl_reply_error();
    }
    exit;
}


failure_route[GW_FAILOVER] {
    xlog("L_ERR", "Failure route");
    if (t_was_cancelled()) {
        exit;
    }

    # failure detection with redirect to next available trunk
    if (t_check_status("(408)|([56][0-9][0-9])")) {
        xlog("Failed trunk $rd/$du detected \n");

        # Disable the last LB destination which failed
        lb_disable_dst();
        if ( lb_next() ) {
            t_on_failure("GW_FAILOVER");
            t_relay();
            exit;
        }
        send_reply("500","All GW are down");
    }
}


local_route {
    if (is_method("BYE") && $DLG_dir=="UPSTREAM") {
        acc_log_request("200 Dialog Timeout");
    }
}

